// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dsysMe

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MutualexclusionClient is the client API for Mutualexclusion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MutualexclusionClient interface {
	ReceiveToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Reply, error)
}

type mutualexclusionClient struct {
	cc grpc.ClientConnInterface
}

func NewMutualexclusionClient(cc grpc.ClientConnInterface) MutualexclusionClient {
	return &mutualexclusionClient{cc}
}

func (c *mutualexclusionClient) ReceiveToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/ping.mutualexclusion/ReceiveToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MutualexclusionServer is the server API for Mutualexclusion service.
// All implementations must embed UnimplementedMutualexclusionServer
// for forward compatibility
type MutualexclusionServer interface {
	ReceiveToken(context.Context, *Token) (*Reply, error)
	mustEmbedUnimplementedMutualexclusionServer()
}

// UnimplementedMutualexclusionServer must be embedded to have forward compatible implementations.
type UnimplementedMutualexclusionServer struct {
}

func (UnimplementedMutualexclusionServer) ReceiveToken(context.Context, *Token) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveToken not implemented")
}
func (UnimplementedMutualexclusionServer) mustEmbedUnimplementedMutualexclusionServer() {}

// UnsafeMutualexclusionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MutualexclusionServer will
// result in compilation errors.
type UnsafeMutualexclusionServer interface {
	mustEmbedUnimplementedMutualexclusionServer()
}

func RegisterMutualexclusionServer(s grpc.ServiceRegistrar, srv MutualexclusionServer) {
	s.RegisterService(&Mutualexclusion_ServiceDesc, srv)
}

func _Mutualexclusion_ReceiveToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutualexclusionServer).ReceiveToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ping.mutualexclusion/ReceiveToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutualexclusionServer).ReceiveToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

// Mutualexclusion_ServiceDesc is the grpc.ServiceDesc for Mutualexclusion service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mutualexclusion_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ping.mutualexclusion",
	HandlerType: (*MutualexclusionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveToken",
			Handler:    _Mutualexclusion_ReceiveToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proto.proto",
}
